# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: callalready
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: call-already-api
# "service" is the name of this project. This will also be added to your AWS resource names.
service: call-already-api

stages:
  prod: # Rename to whatever your production Stage is to ensure Observability is enabled.
    observability: false
  default: # This will disable observability for every Stage other than your production Stage.
    observability: false 

package:
  excludeDevDependencies: true
  exclude:
    - node_modules/aws-sdk/**

### DO NOT CHECK IN
### DO NOT CHECK IN
### DO NOT CHECK IN
### DO NOT CHECK IN
### DO NOT CHECK IN
#
# Uncomment this when locally testing
# plugins:
#   - serverless-offline
#
### DO NOT CHECK IN
### DO NOT CHECK IN
### DO NOT CHECK IN
### DO NOT CHECK IN
### DO NOT CHECK IN

provider:
  name: aws
  runtime: nodejs20.x
  httpApi: 
    cors: true
  environment:
    tableName: ${self:custom.tableName}
    registryTableName: ${self:custom.registryTableName}
    jwtSecretAccessToken: ${param:jwtSecretAccessToken}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'

functions:
  validate-group:
    handler: user.validateGroup
    events:
      - httpApi:
          path: /validate-group
          method: get
  create-group:
    handler: user.createGroup
    events:
      - httpApi:
          path: /create-group
          method: post
  post-responses:
    handler: user.postResponses
    events:
      - httpApi:
          path: /post-responses
          method: post
  register:
    handler: registration.register
    events:
      - httpApi:
          path: /register
          method: post
  verifyEmail:
    handler: registration.verifyEmail
    events:
      - httpApi:
          path: /verify-email
          method: get
  loginUser:
    handler: registration.loginUser
    events:
      - httpApi:
          path: /login-user
          method: post

custom:
  tableName: user-groups
  registryTableName: user-registry
  bundle:
    forceExclude:
      - "@aws-sdk/client-dynamodb"
      - "@aws-sdk/lib-dynamodb"
      - "@aws-sdk/util-dynamodb"

resources:
  Resources:
    UsersDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    UserRegistryDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.registryTableName}
        AttributeDefinitions:
          - AttributeName: Email
            AttributeType: S
        KeySchema:
          - AttributeName: Email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST